package com.example.kfile.controller;import com.example.kfile.domain.FileDetail;import com.example.kfile.domain.FileItem;import com.example.kfile.domain.request.FileListRequest;import com.example.kfile.domain.result.FileEntry;import com.example.kfile.domain.result.FileEntryList;import com.example.kfile.repository.FileDetailRepository;import com.example.kfile.repository.FileItemRepository;import com.example.kfile.util.AjaxJson;import com.example.kfile.util.FileSortUtil;import com.example.kfile.util.FileUtil;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import jakarta.validation.Valid;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.PostMapping;import org.springframework.web.bind.annotation.RequestBody;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RestController;import java.io.FileNotFoundException;import java.util.ArrayList;import java.util.List;import java.util.Optional;/** * 文件列表相关接口 */@Api(tags = "文件列表模块")@Slf4j@RequestMapping("/api/fileItem")@RestControllerpublic class FileController {    private FileDetailRepository fileDetailRepository;    private FileItemRepository fileItemRepository;    @Autowired    public void setFileDetailRepository(FileDetailRepository fileDetailRepository) {        this.fileDetailRepository = fileDetailRepository;    }    @Autowired    public void setFileItemRepository(FileItemRepository fileItemRepository) {        this.fileItemRepository = fileItemRepository;    }    @ApiOperation(value = "获取文件列表")    @PostMapping("/files")    public AjaxJson<FileEntryList> list(@Valid @RequestBody FileListRequest fileListRequest) throws Exception {        // 处理请求参数默认值        fileListRequest.handleDefaultValue();        List<FileItem> fileItems = fileItemRepository.findFileItemByDirectory(fileListRequest.getDirectory());        List<FileEntry> fileEntries = new ArrayList<>();        for (FileItem fileItem : fileItems) {            FileDetail fileDetail = fileDetailRepository.findById(fileItem.getFileInfoId()).orElseThrow(() -> new FileNotFoundException("找不到文件信息：" + fileItem.getFileInfoId()));            fileEntries.add(FileUtil.getFileEntry(fileItem, fileDetail));        }        FileSortUtil.sort(fileEntries, fileListRequest);        return AjaxJson.getSuccessData(new FileEntryList(fileEntries));    }    @ApiOperation(value = "获取单个文件信息")    @PostMapping("/file/item")    public AjaxJson<?> fileItem(@Valid @RequestBody String fileItemId) throws FileNotFoundException {        FileItem fileItem = fileItemRepository.findById(fileItemId).orElseThrow(FileNotFoundException::new);        Optional<FileDetail> fileDetailOptional = fileDetailRepository.findById(fileItem.getFileInfoId());        if (fileDetailOptional.isPresent()) {            FileDetail fileDetail = fileDetailOptional.get();            return AjaxJson.getSuccessData(FileUtil.getFileEntry(fileItem, fileDetail));        } else {            throw new FileNotFoundException("找不到文件信息：" + fileItem.getFileInfoId());        }    }}