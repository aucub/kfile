package com.example.kfile.controller;import com.example.kfile.domain.FileInfo;import com.example.kfile.domain.FileInfoList;import com.example.kfile.domain.StorageSource;import com.example.kfile.domain.request.FileListRequest;import com.example.kfile.repository.FileInfoRepository;import com.example.kfile.repository.StorageSourceRepository;import com.example.kfile.util.AjaxJson;import com.example.kfile.util.FileSortUtil;import io.swagger.annotations.Api;import io.swagger.annotations.ApiOperation;import jakarta.validation.Valid;import lombok.extern.slf4j.Slf4j;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.web.bind.annotation.*;import java.util.List;/** * 文件列表相关接口, 如展示存储源列表, 展示文件列表, 搜索文件列表等. */@Api(tags = "文件列表模块")@Slf4j@RequestMapping("/api/storage")@RestControllerpublic class FileController {    private FileInfoRepository fileInfoRepository;    private StorageSourceRepository storageSourceRepository;    @Autowired    public void setFileInfoRepository(FileInfoRepository fileInfoRepository) {        this.fileInfoRepository = fileInfoRepository;    }    @Autowired    public void setStorageSourceRepository(StorageSourceRepository storageSourceRepository) {        this.storageSourceRepository = storageSourceRepository;    }    @ApiOperation(value = "获取存储源列表")    @GetMapping("/list")    public AjaxJson<List<StorageSource>> storageList() {        return AjaxJson.getSuccessData(storageSourceRepository.findByEnableStorageTrue());    }    @ApiOperation(value = "获取文件列表")    @PostMapping("/files")    public AjaxJson<FileInfoList> list(@Valid @RequestBody FileListRequest fileListRequest) throws Exception {        // 处理请求参数默认值        fileListRequest.handleDefaultValue();        // 获取文件列表        List<FileInfo> fileInfos = fileInfoRepository.findFileInfosByPath(fileListRequest.getPath());        FileSortUtil.sort(fileInfos, fileListRequest);        return AjaxJson.getSuccessData(new FileInfoList(fileInfos));    }    @ApiOperation(value = "获取单个文件信息")    @PostMapping("/file/item")    public AjaxJson<?> fileItem(@Valid @RequestBody String fileId) {        FileInfo fileInfo;        try {            fileInfo = fileInfoRepository.findById(fileId).get();        } catch (Exception e) {            return AjaxJson.getError("获取文件信息失败: " + e.getMessage());        }        return AjaxJson.getSuccessData(fileInfo);    }}